// <auto-generated />
using System;
using FintechTestTask.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FintechTestTask.Infrastructure.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20250712094330_RemoveUniqueIndexOnCircleUserId")]
    partial class RemoveUniqueIndexOnCircleUserId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FintechTestTask.Domain.Entities.GameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CircleUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CrossUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrentTurn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("current_turn");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_finished");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int>("RowsAndColumsnNumber")
                        .HasColumnType("integer")
                        .HasColumnName("rows_and_colums_number");

                    b.Property<int?>("WinnerPlayer")
                        .HasColumnType("integer")
                        .HasColumnName("winner_player");

                    b.HasKey("Id");

                    b.HasIndex("CircleUserId");

                    b.HasIndex("CrossUserId");

                    b.HasIndex("OwnerId");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("FintechTestTask.Domain.Entities.MoveEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("PlayerRole")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_role");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("OwnerId");

                    b.ToTable("moves", (string)null);
                });

            modelBuilder.Entity("FintechTestTask.Domain.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TokenHash")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("FintechTestTask.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrentGameId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_game_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash_password");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CurrentGameId")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("FintechTestTask.Domain.Entities.GameEntity", b =>
                {
                    b.HasOne("FintechTestTask.Domain.Entities.UserEntity", "CircleUser")
                        .WithOne()
                        .HasForeignKey("FintechTestTask.Domain.Entities.GameEntity", "CircleUserId")
                        .HasConstraintName("FK_Game_CircleUser");

                    b.HasOne("FintechTestTask.Domain.Entities.UserEntity", "CrossUser")
                        .WithOne()
                        .HasForeignKey("FintechTestTask.Domain.Entities.GameEntity", "CrossUserId")
                        .HasConstraintName("FK_Game_CrossUser");

                    b.Navigation("CircleUser");

                    b.Navigation("CrossUser");
                });

            modelBuilder.Entity("FintechTestTask.Domain.Entities.MoveEntity", b =>
                {
                    b.HasOne("FintechTestTask.Domain.Entities.GameEntity", "Game")
                        .WithMany("Moves")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Moves_Game");

                    b.HasOne("FintechTestTask.Domain.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Moves_User");

                    b.OwnsOne("FintechTestTask.Domain.ValueObjects.CellValueObject", "Cell", b1 =>
                        {
                            b1.Property<Guid>("MoveEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Column")
                                .HasColumnType("integer")
                                .HasColumnName("column");

                            b1.Property<int>("Row")
                                .HasColumnType("integer")
                                .HasColumnName("row");

                            b1.HasKey("MoveEntityId");

                            b1.ToTable("moves");

                            b1.WithOwner()
                                .HasForeignKey("MoveEntityId");
                        });

                    b.Navigation("Cell")
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FintechTestTask.Domain.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("FintechTestTask.Domain.Entities.UserEntity", "User")
                        .WithOne()
                        .HasForeignKey("FintechTestTask.Domain.Entities.RefreshTokenEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RefreshToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FintechTestTask.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("FintechTestTask.Domain.Entities.GameEntity", "CurrentGame")
                        .WithOne()
                        .HasForeignKey("FintechTestTask.Domain.Entities.UserEntity", "CurrentGameId")
                        .HasConstraintName("FK_UserGame_Game");

                    b.Navigation("CurrentGame");
                });

            modelBuilder.Entity("FintechTestTask.Domain.Entities.GameEntity", b =>
                {
                    b.Navigation("Moves");
                });
#pragma warning restore 612, 618
        }
    }
}
